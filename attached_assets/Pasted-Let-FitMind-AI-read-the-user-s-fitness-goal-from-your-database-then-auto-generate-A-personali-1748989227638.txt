Let FitMind AI read the user's fitness goal (from your database), then auto-generate:

✅ A personalized macro plan

✅ A 7-day meal plan

✅ A weekly workout split

These should be saved to:

macro_plans

meal_plans

workout_plans

✅ What We’ll Do (Step-by-Step)
Step 2.1: Add a "Generate Plan" button to your dashboard
When clicked, this triggers an API call to your server (backend route).

Step 2.2: Backend route retrieves the user’s user_goals from the DB
Then sends that to OpenAI with a special system prompt to generate plans.

Step 2.3: Save the AI response to your tables (macro_plans, meal_plans, workout_plans)
Step 2.4: Show a confirmation message in the UI, and refresh the dashboard.
✅ Step 2.1 – Frontend: Add the Button
In your Dashboard.tsx (or whatever your dashboard file is called), insert this inside your layout:

tsx
Copy
Edit
<button 
  onClick={handleGeneratePlan}
  className="bg-blue-600 text-white px-4 py-2 rounded mt-4 hover:bg-blue-700"
>
  Generate New Plan from My Goal
</button>
Add this function above:

tsx
Copy
Edit
const handleGeneratePlan = async () => {
  try {
    const response = await fetch(`/api/generate-plan/${userId}`, {
      method: "POST"
    });
    const data = await response.json();
    alert("Plan generated! Refreshing dashboard...");
    window.location.reload();
  } catch (err) {
    alert("Failed to generate plan.");
  }
};
✅ Step 2.2 – Backend: Create POST /api/generate-plan/:userId Route
Add this in routes.ts:

ts
Copy
Edit
app.post("/api/generate-plan/:userId", async (req, res) => {
  try {
    const userId = parseInt(req.params.userId);
    const userGoal = await storage.getUserGoal(userId);
    
    if (!userGoal) {
      return res.status(404).json({ message: "User goal not found." });
    }

    // Format input for GPT
    const prompt = `
You are a certified health coach. Based on this user's goal, generate:
1. A macro plan (calories, protein, carbs, fats)
2. A 7-day meal plan
3. A 1-week workout plan

User Goal:
- Type: ${userGoal.goal_type}
- Current Weight: ${userGoal.current_weight}
- Target Weight: ${userGoal.target_weight}
- Timeline: ${userGoal.timeline}
- Activity Level: ${userGoal.activity_level}
- Dietary Preferences: ${userGoal.dietary_preferences}

Output each section clearly.
`;

    const aiResult = await openai.chat.completions.create({
      model: "gpt-4o",
      messages: [
        { role: "system", content: "You are a certified fitness and nutrition coach." },
        { role: "user", content: prompt }
      ],
      temperature: 0.6,
      max_tokens: 1500
    });

    const content = aiResult.choices[0].message.content;

    // OPTIONAL: Parse or split content for separate storage
    await storage.saveGeneratedPlan(userId, content); // You may break this into multiple save functions

    res.json({ success: true });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "Error generating plan." });
  }
});