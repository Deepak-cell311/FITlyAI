A /create-checkout-session endpoint that starts Stripe Checkout

A /webhook endpoint that Stripe calls after payment

Automatic update to your users table: is_active = true

ðŸ§± Step-by-Step Setup in Replit
ðŸ”¹ Step 1: Create a Replit .env File (or use Secrets tab)
Add the following secrets:

ini
Copy
Edit
STRIPE_SECRET_KEY=sk_test_yourStripeSecretKey
STRIPE_PRICE_ID=price_1RW6N6HotdPkQkSpjJWREYygl
SUPABASE_URL=https://nythxdxvrgvrchfddnzk.supabase.co
SUPABASE_SERVICE_ROLE_KEY=your_supabase_service_key
STRIPE_WEBHOOK_SECRET=your_webhook_secret (we'll add this later)
ðŸ”¹ Step 2: Install These NPM Packages in Replit Shell
bash
Copy
Edit
npm install express stripe @supabase/supabase-js body-parser
ðŸ”¹ Step 3: Your index.js or server.js File
js
Copy
Edit
const express = require('express');
const stripe = require('stripe')(process.env.STRIPE_SECRET_KEY);
const { createClient } = require('@supabase/supabase-js');
const bodyParser = require('body-parser');

const app = express();
const PORT = 3000;

// Replit-specific: Supabase client
const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_SERVICE_ROLE_KEY);

// Parse JSON (for create-checkout-session)
app.use(express.json());

// âœ… Stripe Checkout
app.post('/create-checkout-session', async (req, res) => {
  const { email } = req.body;

  const session = await stripe.checkout.sessions.create({
    mode: 'subscription',
    payment_method_types: ['card'],
    line_items: [
      {
        price: process.env.STRIPE_PRICE_ID,
        quantity: 1,
      },
    ],
    customer_email: email,
    success_url: 'https://your-domain.com/success',
    cancel_url: 'https://your-domain.com/cancel',
  });

  res.json({ url: session.url });
});

// âœ… Stripe Webhook (raw body)
app.post('/webhook', bodyParser.raw({ type: 'application/json' }), async (req, res) => {
  const sig = req.headers['stripe-signature'];
  let event;

  try {
    event = stripe.webhooks.constructEvent(req.body, sig, process.env.STRIPE_WEBHOOK_SECRET);
  } catch (err) {
    console.log('Webhook Error:', err.message);
    return res.status(400).send(`Webhook Error: ${err.message}`);
  }

  // When payment is completed
  if (event.type === 'checkout.session.completed') {
    const session = event.data.object;
    const email = session.customer_email;

    await supabase
      .from('users')
      .update({ is_active: true, stripe_customer_id: session.customer })
      .eq('email', email);
  }

  res.json({ received: true });
});

app.listen(PORT, () => console.log(`Server running on port ${PORT}`));