Add Password Reset Functionality

This involves 3 parts:

User requests password reset â†’ /api/request-password-reset

You send them a password reset email with a secure token link

They click the link and are taken to a page where they can set a new password â†’ /api/reset-password

ðŸ”§ 2a. Update your database schema
Letâ€™s add the fields for resetting passwords:

password_reset_token (TEXT)

password_reset_token_expiry (TIMESTAMP)

Update your schema.ts:
Add inside the users table definition:


password_reset_token: text("password_reset_token"),
password_reset_token_expiry: timestamp("password_reset_token_expiry"),

Then run:

npx drizzle-kit push

2b. Create Route: /api/request-password-reset

Add this in routes.ts:


import crypto from "crypto";
import { sendEmail } from "../utils/email"; // You already have this

apiRouter.post("/request-password-reset", async (req, res) => {
  const { email } = req.body;
  if (!email) return res.status(400).json({ error: "Email is required" });

  const token = crypto.randomBytes(32).toString("hex");
  const expiry = new Date(Date.now() + 1000 * 60 * 60); // 1 hour from now

  // Update DB with token and expiry
  await db
    .update(users)
    .set({
      password_reset_token: token,
      password_reset_token_expiry: expiry,
    })
    .where(eq(users.email, email));

  const resetLink = `https://www.fitlyai.com/reset-password?token=${token}`;

  await sendEmail({
    to: email,
    subject: "Reset your password",
    html: `<p>Click <a href="${resetLink}">here</a> to reset your password. This link is valid for 1 hour.</p>`,
  });

  return res.json({ message: "Password reset email sent." });
});


ðŸ”§ 2c. Create Route: /api/reset-password
Add this to routes.ts:

apiRouter.post("/reset-password", async (req, res) => {
  const { token, newPassword } = req.body;
  if (!token || !newPassword)
    return res.status(400).json({ error: "Missing token or new password" });

  const user = await db
    .select()
    .from(users)
    .where(eq(users.password_reset_token, token))
    .limit(1)
    .then((res) => res[0]);

  if (!user || new Date(user.password_reset_token_expiry) < new Date())
    return res.status(400).json({ error: "Invalid or expired token" });

  // Update password in Supabase Auth
  const { error } = await supabase.auth.admin.updateUserById(user.supabase_id, {
    password: newPassword,
  });

  if (error) return res.status(500).json({ error: "Failed to update password" });

  // Clear token
  await db
    .update(users)
    .set({
      password_reset_token: null,
      password_reset_token_expiry: null,
    })
    .where(eq(users.id, user.id));

  return res.json({ message: "Password successfully updated" });
});.